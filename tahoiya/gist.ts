import {stripIndent} from 'common-tags';
import moment from 'moment';

interface Battle {
	timestamp: string;
	theme: string;
	word: string;
	sourceString: string;
	url: string;
	meanings: Array<{
		text: string;
		type: 'dummy' | 'user' | 'correct';
		source?: string;
		title?: string;
		user?: string;
		betters: Array<{user: string; coins: number}>;
	}>;
	comments: Array<{
		text: string;
		date: number;
		user: string;
	}>;
	author: string | null;
}

interface GistData {
	battles: Battle[];
	offset: number;
}

const getMemberName = (user: string, members: unknown[]): string => {
	if (user === 'tahoiyabot-01') {
		return 'たほいやAIくん1号 (仮)';
	}

	if (user === 'tahoiyabot-02') {
		return 'たほいやAIくん2号 (仝)';
	}

	const member = members.find(({id}) => id === user);
	return member?.profile?.display_name || member?.name || user;
};

const pluralize = (count: number, noun: string): string => {
	if (count === 1) {
		return `${count} ${noun}`;
	}
	return `${count} ${noun}s`;
};

export const serialize = (data: GistData, members: unknown[]): string => {
	const {battles, offset} = data;

	const lines: string[] = [];

	lines.push(stripIndent`
		# たほいや対戦ログ ${battles.length === 0 ? '' : `第${offset + 1}回～第${offset + battles.length}回`}
		
		[![たほいや](https://img.shields.io/badge/slackbot-たほいや-blue.svg)](https://github.com/tsg-ut/slackbot)
		
		## 最新の対戦結果
		
	`);

	for (const [battleIndex, battle] of battles.entries()) {
		lines.push(`### 第${offset + battleIndex + 1}回 ${battle.theme}`);
		lines.push('');

		const battleDate = moment(battle.timestamp).utcOffset('+0900').format('YYYY年MM月DD日 HH:mm');
		lines.push(`**日時**: ${battleDate}`);
		lines.push(`**お題**: [${battle.word}](${battle.url})`);
		lines.push(`**出典**: ${battle.sourceString}`);

		if (battle.author) {
			lines.push(`**出題者**: ${getMemberName(battle.author, members)}`);
		}

		lines.push('');

		const correctMeaning = battle.meanings.find((meaning) => meaning.type === 'correct');
		if (correctMeaning) {
			lines.push(`**正解**: ${correctMeaning.text}`);
		}

		lines.push('');
		lines.push('#### 意味候補');
		lines.push('');

		for (const [meaningIndex, meaning] of battle.meanings.entries()) {
			const isCorrect = meaning.type === 'correct';
			const prefix = isCorrect ? '✅' : '❌';
			const betterCount = meaning.betters.length;
			const betterText = betterCount > 0 ? ` (${pluralize(betterCount, 'better')})` : '';

			lines.push(`${prefix} **${meaningIndex + 1}.** ${meaning.text}${betterText}`);

			if (meaning.type === 'user') {
				lines.push(`   - 提出者: ${getMemberName(meaning.user!, members)}`);
			} else if (meaning.type === 'dummy') {
				lines.push(`   - 出典: [${meaning.title}](${meaning.source})`);
			}

			if (meaning.betters.length > 0) {
				const bettersList = meaning.betters.map((better) => `${getMemberName(better.user, members)} (${better.coins}枚)`).join(', ');
				lines.push(`   - ベッター: ${bettersList}`);
			}

			lines.push('');
		}

		if (battle.comments.length > 0) {
			lines.push('#### コメント');
			lines.push('');

			for (const comment of battle.comments) {
				const commentDate = moment(comment.date).utcOffset('+0900').format('MM/DD HH:mm');
				lines.push(`> ${comment.text}`);
				lines.push('> ');
				lines.push(`> — ${getMemberName(comment.user, members)} (${commentDate})`);
				lines.push('');
			}
		}

		lines.push('---');
		lines.push('');
	}

	if (battles.length === 0) {
		lines.push('*まだ対戦ログはありません*');
		lines.push('');
	}

	lines.push(stripIndent`
		## 統計情報
		
		*準備中*
		
		---
		
		Generated by [slackbot](https://github.com/tsg-ut/slackbot)
	`);

	return lines.join('\n');
};

export const gist = {
	serialize,
};
